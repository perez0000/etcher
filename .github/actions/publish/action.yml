---
name: package and publish GitHub (draft) release
# https://github.com/product-os/flowzone/tree/master/.github/actions
inputs:
  json:
    description: "JSON stringified object containing all the inputs from the calling workflow"
    required: true
  secrets:
    description: "JSON stringified object containing all the secrets from the calling workflow"
    required: true

  # --- custom environment
  NODE_VERSION:
    type: string
    default: "18.x"
  VERBOSE:
    type: string
    default: "true"

runs:
  # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  using: "composite"
  steps:
    - name: Download custom source artifact
      uses: actions/download-artifact@v3
      with:
        name: custom-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}-${{ runner.os }}
        path: ${{ runner.temp }}

    - name: Extract custom source artifact
      if: runner.os != 'Windows'
      shell: bash
      working-directory: .
      run: tar -xf ${{ runner.temp }}/custom.tgz

    - name: Extract custom source artifact
      if: runner.os == 'Windows'
      shell: pwsh
      working-directory: .
      run: C:\"Program Files"\Git\usr\bin\tar.exe --force-local -xf ${{ runner.temp }}\custom.tgz

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.NODE_VERSION }}
        cache: npm

    - name: Install host dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: sudo apt-get install -y --no-install-recommends fakeroot dpkg rpm

    - name: Install host dependencies
      if: runner.os == 'macOS'
      # FIXME: Python 3.12 dropped distutils that node-gyp depends upon.
      # This is a temporary workaround to make the job use Python 3.11 until
      # we update to npm 10+.
      uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4
      with:
        python-version: '3.11'

    # https://www.electron.build/code-signing.html
    # https://dev.to/rwwagner90/signing-electron-apps-with-github-actions-4cof
    - name: Import Apple code signing certificate
      if: runner.os == 'macOS'
      shell: bash
      run: |
        KEY_CHAIN=build.keychain
        CERTIFICATE_P12=certificate.p12

        # Recreate the certificate from the secure environment variable
        echo $CERTIFICATE_P12_B64 | base64 --decode > $CERTIFICATE_P12

        # Create a keychain
        security create-keychain -p actions $KEY_CHAIN

        # Make the keychain the default so identities are found
        security default-keychain -s $KEY_CHAIN

        # Unlock the keychain
        security unlock-keychain -p actions $KEY_CHAIN

        security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign

        security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN

        # remove certs
        rm -fr *.p12
      env:
        CERTIFICATE_P12_B64: ${{ fromJSON(inputs.secrets).APPLE_SIGNING }}
        CERTIFICATE_PASSWORD: ${{ fromJSON(inputs.secrets).APPLE_SIGNING_PASSWORD }}

    - name: Import Windows code signing certificate
      if: runner.os == 'Windows'
      id: import_win_signing_cert
      uses: timheuer/base64-to-file@v1
      with:
        fileName: 'win-cert.pfx'
        encodedString: ${{ fromJSON(inputs.secrets).WINDOWS_SIGNING }}

    - name: Package release
      shell: bash
      # IMPORTANT: before making changes to this step please consult @engineering in balena's chat.
      run: |
        if [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]]; then
          export DEBUG='electron-forge:*,electron-packager,electron-rebuild'
        fi

        APPLICATION_VERSION="$(jq -r '.version' package.json)"

        if [[ "${RUNNER_OS}" == Linux ]]; then
          BUILD_ARCHS="x64"

        elif [[ "${RUNNER_OS}" == macOS ]]; then
          BUILD_ARCHS="x64,arm64"

        elif [[ "${RUNNER_OS}" == Windows ]]; then
          #BUILD_ARCHS="ia32,x64" -- distutils fails to build for ia32
          BUILD_ARCHS="x64"

        else
          echo "ERROR: unexpected runner OS: ${RUNNER_OS}"
          exit 1
        fi

        npx electron-forge make --arch="${BUILD_ARCHS}"

        echo "version=${APPLICATION_VERSION}" >> $GITHUB_OUTPUT

        # collect all artifacts from subdirectories under a common top-level directory
        mkdir -p dist
        find ./out/make -type f \( \
          -iname "*.zip" -o        \
          -iname "*.dmg" -o        \
          -iname "*.rpm" -o        \
          -iname "*.deb" -o        \
          -iname "*.AppImage" -o   \
          -iname "*Setup.exe"      \
        \) -ls -exec cp '{}' dist/ \;
      env:
        # ensure we sign the artifacts
        NODE_ENV: production
        # Apple notarization
        XCODE_APP_LOADER_EMAIL: ${{ fromJSON(inputs.secrets).XCODE_APP_LOADER_EMAIL }}
        XCODE_APP_LOADER_PASSWORD: ${{ fromJSON(inputs.secrets).XCODE_APP_LOADER_PASSWORD }}
        XCODE_APP_LOADER_TEAM_ID: ${{ fromJSON(inputs.secrets).XCODE_APP_LOADER_TEAM_ID }}
        # Windows signing
        WINDOWS_SIGNING_CERT_PATH: ${{ steps.import_win_signing_cert.outputs.filePath }}
        WINDOWS_SIGNING_PASSWORD: ${{ fromJSON(inputs.secrets).WINDOWS_SIGNING_PASSWORD }}
        # https://github.blog/2020-08-03-github-actions-improvements-for-fork-and-pull-request-workflows/#improvements-for-public-repository-forks
        # https://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks#about-workflow-runs-from-public-forks
        CSC_FOR_PULL_REQUEST: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
        path: dist
        retention-days: 1
        if-no-files-found: error
